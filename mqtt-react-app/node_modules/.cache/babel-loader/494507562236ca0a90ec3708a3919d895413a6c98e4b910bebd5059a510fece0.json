{"ast":null,"code":"import mqtt from 'mqtt';\nconst MQTT_URL = 'wss://y29efdb1.ala.us-east-1.emqxsl.com:8084/mqtt';\nconst MQTT_OPTIONS = {\n  clientId: 'react_mqtt_client_' + Math.random().toString(16).substr(2, 8),\n  username: 'arduino',\n  password: 'arduino1234',\n  keepalive: 60,\n  clean: true,\n  reconnectPeriod: 1000,\n  connectTimeout: 30 * 1000,\n  will: {\n    topic: 'contentor/lotacao',\n    payload: 'Connection Closed abnormally..!',\n    qos: 0,\n    retain: false\n  },\n  rejectUnauthorized: false\n};\nconst client = mqtt.connect(MQTT_URL, MQTT_OPTIONS);\nclient.on('connect', () => {\n  console.log('Connected to MQTT Broker');\n});\nclient.on('error', err => {\n  console.error('Connection error: ', err);\n  client.end();\n});\nclient.on('reconnect', () => {\n  console.log('Reconnecting...');\n});\nclient.on('close', () => {\n  console.log('Connection closed');\n});\nclient.on('offline', () => {\n  console.log('Client went offline');\n});\nexport default client;","map":{"version":3,"names":["mqtt","MQTT_URL","MQTT_OPTIONS","clientId","Math","random","toString","substr","username","password","keepalive","clean","reconnectPeriod","connectTimeout","will","topic","payload","qos","retain","rejectUnauthorized","client","connect","on","console","log","err","error","end"],"sources":["C:/Users/pedro/Desktop/xola/Tecnologias de Interface/Projeto Final/Website/teste2/mqtt-react-app/src/mqttService.js"],"sourcesContent":["import mqtt from 'mqtt';\r\n\r\nconst MQTT_URL = 'wss://y29efdb1.ala.us-east-1.emqxsl.com:8084/mqtt';\r\nconst MQTT_OPTIONS = {\r\n    clientId: 'react_mqtt_client_' + Math.random().toString(16).substr(2, 8),\r\n    username: 'arduino',\r\n    password: 'arduino1234',\r\n    keepalive: 60,\r\n    clean: true,\r\n    reconnectPeriod: 1000,\r\n    connectTimeout: 30 * 1000,\r\n    will: {\r\n        topic: 'contentor/lotacao',\r\n        payload: 'Connection Closed abnormally..!',\r\n        qos: 0,\r\n        retain: false\r\n    },\r\n    rejectUnauthorized: false\r\n};\r\n\r\nconst client = mqtt.connect(MQTT_URL, MQTT_OPTIONS);\r\n\r\nclient.on('connect', () => {\r\n    console.log('Connected to MQTT Broker');\r\n});\r\n\r\nclient.on('error', (err) => {\r\n    console.error('Connection error: ', err);\r\n    client.end();\r\n});\r\n\r\nclient.on('reconnect', () => {\r\n    console.log('Reconnecting...');\r\n});\r\n\r\nclient.on('close', () => {\r\n    console.log('Connection closed');\r\n});\r\n\r\nclient.on('offline', () => {\r\n    console.log('Client went offline');\r\n});\r\n\r\nexport default client;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AAEvB,MAAMC,QAAQ,GAAG,mDAAmD;AACpE,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,oBAAoB,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACxEC,QAAQ,EAAE,SAAS;EACnBC,QAAQ,EAAE,aAAa;EACvBC,SAAS,EAAE,EAAE;EACbC,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE,IAAI;EACrBC,cAAc,EAAE,EAAE,GAAG,IAAI;EACzBC,IAAI,EAAE;IACFC,KAAK,EAAE,mBAAmB;IAC1BC,OAAO,EAAE,iCAAiC;IAC1CC,GAAG,EAAE,CAAC;IACNC,MAAM,EAAE;EACZ,CAAC;EACDC,kBAAkB,EAAE;AACxB,CAAC;AAED,MAAMC,MAAM,GAAGpB,IAAI,CAACqB,OAAO,CAACpB,QAAQ,EAAEC,YAAY,CAAC;AAEnDkB,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;EACvBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;AAC3C,CAAC,CAAC;AAEFJ,MAAM,CAACE,EAAE,CAAC,OAAO,EAAGG,GAAG,IAAK;EACxBF,OAAO,CAACG,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAAC;EACxCL,MAAM,CAACO,GAAG,CAAC,CAAC;AAChB,CAAC,CAAC;AAEFP,MAAM,CAACE,EAAE,CAAC,WAAW,EAAE,MAAM;EACzBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;AAClC,CAAC,CAAC;AAEFJ,MAAM,CAACE,EAAE,CAAC,OAAO,EAAE,MAAM;EACrBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AACpC,CAAC,CAAC;AAEFJ,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;EACvBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;AACtC,CAAC,CAAC;AAEF,eAAeJ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}